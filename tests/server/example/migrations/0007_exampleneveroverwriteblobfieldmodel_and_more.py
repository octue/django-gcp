# Generated by Django 4.2.16 on 2025-03-02 10:29

from django.db import migrations, models
import django_gcp.storage.fields
import tests.server.example.models
import uuid


class Migration(migrations.Migration):
    dependencies = [
        ("example", "0006_examplemultipleblobfieldmodel"),
    ]

    operations = [
        migrations.CreateModel(
            name="ExampleNeverOverwriteBlobFieldModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "blob",
                    django_gcp.storage.fields.BlobField(
                        accept_mimetype="*/*",
                        default=None,
                        get_destination_path=tests.server.example.models.get_destination_path_from_id,
                        help_text="You can create a model like this, but if you attempt to select a different file during update, you should see an exception. You need to override the widget to show read-only in this case.",
                        ingress_to="_tmp/",
                        on_change=None,
                        overwrite_mode="never",
                        store_key="media",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ExamplePathValidationBlobFieldModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "blob",
                    django_gcp.storage.fields.BlobField(
                        accept_mimetype="*/*",
                        default=None,
                        get_destination_path=tests.server.example.models.get_destination_path_and_validate,
                        help_text="If you upload a file that doesn't end with .txt, you should see a validation error in the admin.",
                        ingress_to="_tmp/",
                        on_change=None,
                        overwrite_mode="never",
                        store_key="media",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ExampleReadOnlyBlobFieldModel",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("category", models.CharField(blank=True, max_length=20, null=True)),
                (
                    "example_read_only_blob",
                    django_gcp.storage.fields.BlobField(
                        accept_mimetype="*/*",
                        blank=True,
                        default=None,
                        get_destination_path=tests.server.example.models.get_destination_path,
                        help_text="The widget should be read-only always",
                        ingress_to="_tmp/",
                        null=True,
                        on_change=None,
                        overwrite_mode="never",
                        store_key="media",
                    ),
                ),
                (
                    "example_create_only_blob",
                    django_gcp.storage.fields.BlobField(
                        accept_mimetype="*/*",
                        blank=True,
                        default=None,
                        get_destination_path=tests.server.example.models.get_destination_path,
                        help_text="The widget should be as normal for object addition, read-only in a change form",
                        ingress_to="_tmp/",
                        null=True,
                        on_change=None,
                        overwrite_mode="never",
                        store_key="media",
                    ),
                ),
            ],
        ),
        migrations.DeleteModel(
            name="ExampleUneditableBlobFieldModel",
        ),
        migrations.AddField(
            model_name="examplecallbackblobfieldmodel",
            name="activity",
            field=models.CharField(blank=True, max_length=60, null=True),
        ),
        migrations.AlterField(
            model_name="exampleblankblobfieldmodel",
            name="blob",
            field=django_gcp.storage.fields.BlobField(
                accept_mimetype="*/*",
                blank=True,
                default=None,
                get_destination_path=tests.server.example.models.get_destination_path,
                help_text="Shows typical behaviour of the blobfield, with name collision prevention so you should be able to change the file as many times as you like. The field is blankable (saving with no file selected should succeed).",
                ingress_to="_tmp/",
                null=True,
                on_change=None,
                overwrite_mode="never",
                store_key="media",
            ),
        ),
        migrations.AlterField(
            model_name="exampleblobfieldmodel",
            name="blob",
            field=django_gcp.storage.fields.BlobField(
                accept_mimetype="*/*",
                default=None,
                get_destination_path=tests.server.example.models.get_destination_path,
                help_text="Shows typical behaviour of the blobfield, with name collision prevention so you should be able to change the file as many times as you like, but it is not blankable or nullable (attempt to save with no file selected to see validation error).",
                ingress_to="_tmp/",
                on_change=None,
                overwrite_mode="never",
                store_key="media",
            ),
        ),
        migrations.AlterField(
            model_name="examplecallbackblobfieldmodel",
            name="blob",
            field=django_gcp.storage.fields.BlobField(
                accept_mimetype="*/*",
                blank=True,
                default=None,
                get_destination_path=tests.server.example.models.get_destination_path,
                help_text="The activity should update if you change the blob then save. If you save without changing the blob, activity shouldn't be affected.",
                ingress_to="_tmp/",
                null=True,
                on_change=tests.server.example.models.my_on_change_callback,
                overwrite_mode="never",
                store_key="media",
            ),
        ),
        migrations.AlterField(
            model_name="examplemultipleblobfieldmodel",
            name="blob1",
            field=django_gcp.storage.fields.BlobField(
                accept_mimetype="*/*",
                default=None,
                get_destination_path=tests.server.example.models.get_destination_path,
                help_text="The get_destination_path function gives these unique names",
                ingress_to="_tmp/",
                on_change=None,
                overwrite_mode="never",
                store_key="media",
            ),
        ),
        migrations.AlterField(
            model_name="examplemultipleblobfieldmodel",
            name="blob2",
            field=django_gcp.storage.fields.BlobField(
                accept_mimetype="*/*",
                default=None,
                get_destination_path=tests.server.example.models.get_destination_path,
                help_text="The get_destination_path function gives these unique names",
                ingress_to="_tmp/",
                on_change=None,
                overwrite_mode="never",
                store_key="media",
            ),
        ),
        migrations.AlterField(
            model_name="examplemultipleblobfieldmodel",
            name="blob3",
            field=django_gcp.storage.fields.BlobField(
                accept_mimetype="*/*",
                default=None,
                get_destination_path=tests.server.example.models.get_destination_path,
                help_text="The get_destination_path function gives these unique names",
                ingress_to="_tmp/",
                on_change=None,
                overwrite_mode="never",
                store_key="media",
            ),
        ),
    ]
